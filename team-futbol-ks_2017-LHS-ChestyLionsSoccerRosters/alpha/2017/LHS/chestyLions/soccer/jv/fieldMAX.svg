<?xml 
	version = "1.0" 
	encoding = "UTF-8"
	standalone = "no"
?>

<!DOCTYPE 
	svg 
	PUBLIC 
	"-//W3C//DTD SVG 1.1//EN" 
	"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" 
>

<svg 
	version = "1.1" 
	xmlns = "http://www.w3.org/2000/svg" 
	xmlns:xlink = "http://www.w3.org/1999/xlink" 
	x = "0px" 
	y = "0px" 
	width = "1776px" 
	height = "999px" 
	viewBox = "0 0 1760 990" 
>
	<!-- 16:9 1.77 repeating or 1.78 rounded -->
	<!-- 16 * 110 = 1760, 16 * 120 = 1920 -->
	<!--  9 * 110 =  990,  9 * 120 = 1080 -->

	<!--
		 1 - Goal Keeper/Goalie
		 2 - Right Defender/Halfback-Wingback
		 3 - Left Defender/HalfBack-Wingback
		 4 - Right Center Defender/Fullback
		 5 - Left Center Defender/Fullback
		 6 - Right Midfielder/Mid
		 7 - Right Attacker/Forward
		 8 - Left Midfielder/Mid
		 9 - Center Attacker/Forward
		10 - Attacking Midfielder/Mid
		11 - Left Attacker/Forward
	-->

	<!--
		:: LHS Chesty Lions Soccer Team Rosters Fall 2017 ::


		Head Coach: Mike Murphy
		Varsity Assistant & Goalkeepers: Stan Rasmussen
		JV Assistant: Brandon Daley
		C-Team Assistant: Mike Lee	        
		Manager: Mary Carr


		: Varsity = 19 players:

		Ross Brungardt GK 11 00

		+ 6 defenders
		Jaâ€™Melle Dye D 12 2
		Robbie Kleibohmer D 12 9
		Jack Anderson D 11 5
		Garrett Hart D 11 15
		Trey Hulse D 11 3
		Gary Schmidt D 11 4

		+ 9 midfielders
		Ben Matthews M 12 19
		Joseph Minder M 12 17
		Dario Ramirez M 12 14
		Cole Shupert M 11 10
		Matteo Kalusha-Aguirre M 10 12
		Kanak Masten M 10 18
		Mason Anderson M 9 13
		Tanner Glanton M 9 16
		Alec Murphy M 9 11

		+ 3 forwards
		Quentin Harrington F 12 6
		Anton Martinez de Velasco F 12 7
		Will Yanek F 11 8


		: Junior Varsity = 19 players :

		Luke Dunlap 11 11
		Hunter Jones 11 5
		Spencer King 11 12
		Paul Lyan 11 18
		Nathan Stoddard 11 13
		Brandon Thimmesch 11 7
		Andrew Williams 11 22
		Cooper Wright 11 10
		Joseph Hawker 10 19
		Ben Hoopes 10 00
		Nicholai Jost-Epp 10 15
		Jordan Lavin 10 6
		Peyton Mallory 10 14
		Max Northrop 10 8
		Alex Stark 10 17
		Jackson Theilen 10 00
		Aidan Truong 10 3
		Nicholas Davies 9 2
		Abdalla Eltom 9 9


		: C-Team = 20 players :

		Trey Kelly 10 21
		Guillermo Rodriguez 10 10
		Wheeler Battaglia-Davis 9 11
		Ben Cohen 9 5
		Alex Culbertson 9 3
		Evan Day 9 16
		Brevin Flory 9 8
		Ethan Gaddie 9 12
		Omar Gonzalez 9 7
		Salvador Good 9 2
		Sam Gordon-Ross 9 18
		Carter Knox 9 4
		Sam Mandigo 9 14
		Ike Phillips 9 17
		Chase Reed 9 15
		Isaac Seybold 9 9
		Daniel Sikes 9 6
		Trenton Snyder 9 19 / 0
		Giovanni Ventello 9 13
		Adam Walther 9 20 / 00
	-->

	<defs> 

		<linearGradient id = "fadeToLight01">
			<stop offset = "0%" stop-color = "#0F0" />
			<stop offset = "100%" stop-color = "#08F" />
		</linearGradient>
		<linearGradient id = "fadeToDark01">
			<stop offset = "0%" stop-color = "#08F" />
			<stop offset = "100%" stop-color = "#0F0" />
		</linearGradient>
		<radialGradient 
			id = "fadeToCenterLight01" 
			gradientUnits = "userSpaceOnUse"
			cx = "36" 
			cy = "36" 
			r = "30" 
		>
			<stop offset = "0%" stop-color = "#08F" />
			<stop offset = "100%" stop-color = "#00F" />
		</radialGradient>

		<g id = "playerToken01">
			<!-- <use xlink:href = "2017/LHS/chestyLions/soccer/varsity/playerToken.svg#playerToken00" x = "0" y= "0" /> -->
			<use xlink:href = "playerToken.svg#playerToken00" x = "0" y= "0" />
		</g>

		<g id = "teamLabel">
			<rect
				x = "432px"
				y = "10px"
				width = "416px"
				height = "30px" 
				fill = "white"
				stroke = "black"
				stroke-width = "1px"
				rx = "5px"
				ry = "5px"
			/>
			<text
				x = "640px"
				y = "32px"
				text-anchor = "middle"
				font-family = "sans-serif"
				font-size = "18px"
				fill = "#111"
			>LHS Chesty Lions Soccer: Junior Varsity 2017</text>
		</g>

	</defs>

	<!--
		The width property represents the length of the field.
		The field length, the length of the touch lines, should be 
		between 90 and 120 meters.
		45 and 65 yards for US youth fields. 

		The height property represents the width of field.
		The field width, the length of the goal lines, should be 
		between 45 and 90 meters
		35 and 45 yards for US youth fields.
		
		The field length should be greater than than field width.

		A circle of radius 9.15 meters with center at the midpoint of the 
		half field line will be the area where game play begins.
		8 yards for US youth fields (using 7 yards which is 70% of 30 feet). 

		For the shapes in the Viewbox the scale is ten pixels equals a yard.
		With the current Viewbox the maximum field dimension is about 
		110 yards by 80 yards which is smaller than the max FIFA dimensions but 
		big enough to accommodate World Cup Matches, commonly played on 
		105 meter by 68 meter fields.
	 
		That gives us a fidelity of 1/10th of a yard or 3.6 inches per pixel.

		1/10th of a yard = 0.1 yards * (36 inches / 1 yard) = 3.6 inches.

		This is pretty good since the ball, the posts, the touch lines, 
		the goal lines, are all of greater or equal dimension than our 
		pixel fidelity.
	
		Note though that since SVG scales up and down we can simulate 
		sub-pixel fidelity by simple zooming while using a monitor with 
		greater then 1200 x 645 resolution.  On a 1600 x 1200 monitor for 
		example we could zoom up 33% giving us 1 inch per pixel.

		Or on a 2048 by 1152 wide screen aspect ratio, like the
		Samsung 23" 2343BWX or the 23" 1920 x 1280 XL2370-1 with HDMI,
		you could zoom up by 70% and 47% respectively.
	-->

	<use
		xlink:href = "../fieldMAX_fieldOfView.svg#fieldOfView"
		x = "0" 
		y = "0" 
		id = "fieldOfView0000"
	/>

	<use xlink:href = "#teamLabel" />

	<!--
	<g id = "">
		<a xlink:href = "chestyLions/soccer/varsity/fieldMAX.svg">
			<rect
				x = "1275px"
				y = "30px"
				width = "450px"
				height = "300px"
				rx = "42px"
				ry = "32px"
				fill = "#222"
				stroke = "#DDD"
				stroke-width = "10px"
			/>
		</a>
	</g>
	-->

	<!-- 
		id = "scrollTokenForwardRight_ButtonOnRightSideOfScreenPointinRight"
	-->
	<g
		id = "scrollTokenForward"
		class = "button"
		onclick = "focusNextToken(evt); return false;"
	>
		<circle
			cx = "1070px"
			cy = "495px"
			r = "144px"
			fill = "black"
			stroke = "white"
			stroke-width = "6px"
			fill-opacity = "0.6"
			stroke-opacity = "1"
		/>
		<polygon
			id = "trianglePointLeft"
			points = 
				"
					-216, -126 
					0, 250 
					216, -126
				" 
			fill = "#EEE" 
			stroke = "#FFF" 
			stroke-width = "4" 
			transform = "translate(1070, 495) rotate(-90) scale(0.4)"
		/>
		<!--
			fill = "#0F3" 
			stroke = "#EEE" 
		-->
		<circle
			cx = "1070px"
			cy = "495px"
			r = "2px"
			fill = "#EEE"
		/>
	</g>

	<!-- 
		id = "scrollTokenBackwardLeft_ButtonOnLeftSideOfScreenPointingLeft"
	-->
	<g
		id = "scrollTokenBackward"
		class = "button"
		onclick = "focusPrevToken(evt); return false;"
	>
		<circle
			cx = "200px"
			cy = "495px"
			r = "144px"
			fill = "black"
			stroke = "white"
			stroke-width = "6px"
			fill-opacity = "0.6"
			stroke-opacity = "1"
		/>
		<polygon
			id = "trianglePointLeft"
			points = 
				"
					-216, -126 
					0, 250 
					216, -126
				" 
			fill = "#EEE" 
			stroke = "#FFF" 
			stroke-width = "4" 
			transform = "translate(200, 495) rotate(90) scale(0.4)"
		/>
		<!--
			fill = "#0F3" 
			stroke = "#EEE" 
		-->
		<circle
			cx = "200px"
			cy = "495px"
			r = "2px"
			fill = "#EEE"
		/>
	</g>

	<!-- 01 -->
	<!-- 55 -->
	<use 
		xlink:href = "#playerToken01" 
		x = "0" 
		y = "0" 
		id = "player01"
		display = "none"
		onclick = "insertPlayerToken(evt, 1); return false;"
	>
		<animateMotion
			xlink:href = "#player01"
			attributeType = "XML"
			attributeName = "transform"
			type = "translate"
			path = "M 0,0 L 33.5, 33.5"
			begin = "0s"
			dur = "3s"
		/>
		<animateMotion
			xlink:href = "#player01"
			attributeType = "XML"
			attributeName = "transform"
			type = "translate"
			path = "M 33.5, 33.5 L -0.15, -0.15"
			begin = "3s"
			dur = "2s"
		/>
	</use>

	<!--
		xlink:href = "2017/LHS/chestyLions/soccer/varsity/playerToken.svg#playerToken00" 
	-->
	<use 
		xlink:href = "playerToken.svg#playerToken00" 
		x = "72" 
		y = "72" 
		id = "player02"
		display = "none"
		onclick = "insertPlayerToken(evt, 1); return false;"
	>
		<animateMotion
			xlink:href = "#player02"
			attributeType = "XML"
			attributeName = "transform"
			type = "translate"
			path = "M 0,0 L 33.5, 33.5"
			begin = "0s"
			dur = "3s"
		/>
		<animateMotion
			xlink:href = "#player02"
			attributeType = "XML"
			attributeName = "transform"
			type = "translate"
			path = "M 33.5, 33.5 L -0.15, -0.15"
			begin = "3s"
			dur = "2s"
		/>
		<animateMotion
			xlink:href = "#player02"
			attributeType = "XML"
			attributeName = "transform"
			type = "translate"
			path = "M 0,0 L 33.5, 33.5 Z"
			begin = "5s"
			dur = "1s"
			repeatCount = "indefinite"
			fill = "freeze"
		/>
	</use>

	<!--
	<rect x = "0px" y = "0px" width = "72px" height = "72px" fill = "none" stroke = "black" stroke-width = "1px" />
	<rect x = "72px" y = "72px" width = "72px" height = "72px" fill = "none" stroke = "black" stroke-width = "1px" />
	-->

	<g
		id = "addNewPlayerTokens"
		onclick = "addNewPlayerToken(-1); return false;"
	>
	<!--
		onclick = "insertSetOfPlayerTokensAsUseElements(11); return false;"
			x = "1187px"
			y = "12px"
			x1 = "1201px" y1 = "26px"
			x2 = "1221px" y2 = "26px"
			x1 = "1211px" y1 = "16px"
			x2 = "1211px" y2 = "35px"
	-->
		<rect
			height = "27px"
			width = "48px"
			x = "32px"
			y = "12px"
			rx = "5px"
			ry = "5px"
			stroke-width = "2px"
			stroke = "grey"
			fill = "green"
		/>
		<line
			x1 = "46px" y1 = "26px"
			x2 = "66px" y2 = "26px"
			stroke = "white" stroke-width = "4px"
		/>
		<line
			x1 = "56px" y1 = "16px"
			x2 = "56px" y2 = "35px"
			stroke = "white" stroke-width = "4px"
		/>
	</g>

	<g
		id = "pushNewPlayerToken"
		onclick = "pushPT(-1); return false;"
	>
		<rect
			x = "1307px"
			y = "48px"
			width = "386px"
			height = "264px"
			rx = "32px"
			ry = "18px"
			fill = "green"
			stroke-width = "9px"
			stroke = "grey"
		/>
		<line
			x1 = "1339" y1 = "180px"
			x2 = "1661px" y2 = "180px"
			stroke = "white" stroke-width = "16px"
		/>
		<line
			x1 = "1500px" y1 = "75px"
			x2 = "1500px" y2 = "287px"
			stroke = "white" stroke-width = "16px"
		/>
	</g>

	<g id = "varsityButton">
		<!-- Half Field B Half-HD -->
		<a xlink:href = "../varsity/fieldMAX.svg">
			<rect
				x = "1275px"
				y = "345px"
				width = "450px"
				height = "300px"
				rx = "42px"
				ry = "32px"
				fill = "#222"
				stroke = "#DDD"
				stroke-width = "10px"
			/>
			<text
				x = "1500px"
				y = "527px"
				font-family = "sans-serif"
				font-size = "72px"
				fill = "red"
				text-anchor = "middle"
				font-variant = "small-caps"
				font-weight = "900"
				stroke = "#111"
				stroke-width = "1px"
			>Varsity</text>
		</a>
	</g>

	<g id = "cTeamButton">
		<!-- Half Field B-Alone Half-HD -->
		<a xlink:href = "../ct/fieldMAX.svg">
			<rect
				x = "1275px"
				y = "660px"
				width = "450px"
				height = "300px"
				rx = "42px"
				ry = "32px"
				fill = "#222"
				stroke = "#DDD"
				stroke-width = "10px"
			/>
			<text
				x = "1500px"
				y = "842px"
				font-family = "sans-serif"
				font-size = "72px"
				fill = "red"
				text-anchor = "middle"
				font-variant = "small-caps"
				font-weight = "900"
				stroke = "#111"
				stroke-width = "1px"
			>C-Team</text>
		</a>
	</g>

	<use
		xlink:href = "w3c-svg11.svg#svg11icon" 
		x = "1630px"
		y = "918px"
		id = "svgIcon"
		display = "none"
	/>

	<!-- Copyright 2017 Mark S Kalusha 

		This program is free software: you can redistribute it and/or modify
		it under the terms of the GNU General Public License as published by
		the Free Software Foundation, either version 2 of the License, or
		(at your option) any later version.

		This program is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.

		You should have received a copy of the GNU General Public License
		along with this program.  If not, see <http://www.gnu.org/licenses/>.
	-->

	<!-- Creative Commons License -->
	<a xlink:href = "http://creativecommons.org/licenses/GPL/2.0/">
		<image 
			x = "1620px"
			y = "880px"
			width = "88px"
			height = "62px"
			xlink:href = "cc-GPL-a.png" 
		>
			<!--
			xlink:href = "http://creativecommons.org/images/public/cc-GPL-a.png" 
			x = "1630px"
			y = "852px"
			-->
			<title>CC-GNU GPL Copyright Image</title>
			<desc>CC-GNU GPL Copyright Graphical Pointer</desc>
		</image>
	</a>
	<!--
	<br />
	This software is licensed under the 
	<a href = "http://creativecommons.org/licenses/GPL/2.0/">CC-GNU GPL</a> 
	version 2.0 or later.
	-->
	<!-- /Creative Commons License -->

	<!-- https://stackoverflow.com/questions/3346106/accessing-a-dom-object-defined-in-an-external-svg-file -->
	<script type = "application/ecmascript">
	<![CDATA[
		function loadNewSVGDoc (newSVGDoc, nptNumber)
		{
			// import it into the current DOM
			var pt = document.importNode(newSVGDoc.documentElement.getElementById("playerToken00"), true);

			// var tokenNumber_classNodes = pt.getElementsByClassName("tokenNumber"); // [0]; // .item(0);
			// alert(tokenNumber_classNodes.length);

			// var playerTokenLabel = pt.getElementsByClassName("tokenNumber").item(0).textContent;
			// alert("playerTokenLabel: "+ playerTokenLabel);

			var ptSize = 72;
			var nptx = 9 + 35 + ((Number(nptNumber) - 1) * (ptSize + 2));
			var npty = 9 + 45;
			if (nptNumber == 0) { nptx = 0; npty = 0; }

			var playerTokenElements = 0;
			if (nptNumber != 0)
			{
				playerTokenElements = document.getElementsByClassName("playerToken");
				if (nptNumber < 0) { nptNumber = playerTokenElements.length + 1; }
				// alert("nptNumber: " + nptNumber);
				nptx = 9 + 35 + ((Number(nptNumber) - 1) * (ptSize + 2));
				npty = 9 + 45;
			}

			var playerTokenElements = 0;
			var carriageReturnNumber = 16;
			var resetTokenJustification = 0;
			var justificationResetCounter = 0;
			var xJustificationFactor = resetTokenJustification * carriageReturnNumber * justificationResetCounter;
			var yJustificationFactor = ptSize * justificationResetCounter;

			if (nptNumber != 0)
			{
				playerTokenElements = document.getElementsByClassName("playerToken");
				if (nptNumber < 0) { nptNumber = playerTokenElements.length + 1; }
				// alert("nptNumber: " + nptNumber);

				// https://stackoverflow.com/questions/4228356/how-to-perform-integer-division-and-get-the-remainder-in-javascript
				if (nptNumber > carriageReturnNumber) { resetTokenJustification = 1; }
				justificationResetCounter = ~~((Number(nptNumber) - 1) / carriageReturnNumber);
				xJustificationFactor = resetTokenJustification * carriageReturnNumber * justificationResetCounter;
				yJustificationFactor = ptSize * justificationResetCounter;
				
				nptx = 9 + 35 + ((Number(nptNumber) - xJustificationFactor - 1) * (ptSize + 2));
				npty = 9 + 45 + yJustificationFactor;
			}

			var nptId = "newPlayerToken" + nptNumber;
			var nextPT = Number(nptNumber) + 1;

			pt.setAttribute("id", nptId); // Set pt (player-token) id attr. 
			pt.getElementsByClassName("tokenNumber").item(0).textContent = nptNumber;
			pt.getElementsByClassName("ptJerseyNumber").item(0).textContent = nptNumber;
			pt.getElementsByClassName("ptPlayerName").item(0).textContent = nptNumber;

			pt.setAttribute("transform", "translate(" + nptx + "," + npty + ")"); // Set player-token x,y coordinate.
			// pt.setAttribute("onclick", "addNewPlayerToken(" + nextPT + "); return false;");
			pt.setAttribute("onclick", "focusPlayerToken(evt, this.id); return false;");
			document.querySelector('svg').appendChild(pt); // document.documentElement.appendChild(pt);
		};

		function fetchXML (url, callback, number)
		{
			var xhr = new XMLHttpRequest();
			xhr.open('GET', url, true);
			xhr.onreadystatechange =
				function (evt)
				{
					// Do not explicitly handle errors, those should be
					// visible via console output in the browser.
					if (xhr.readyState === 4)
					{
						callback(xhr.responseXML, number);
					}
				};

			xhr.send(null);
		};

		function addNewPlayerToken (nptNumber)
		{
			// Fetch the document using XHR, Ajax style?
			fetchXML
			(
				"http://localhost:8000/2017/LHS/chestyLions/soccer/varsity/playerToken.svg", // #playerToken00",
				// "http://localhost:8000/playerToken.svg", // #playerToken00",
				// http://team-futbol-ks.org/playerToken.svg", //fieldMAX.svg
				loadNewSVGDoc,
				nptNumber
			);
		};

		var fieldOfView = document.getElementById("fieldOfView0000");
		var fovWidth = fieldOfView.getBBox().width;
		var fovHeight = fieldOfView.getBBox().height;
		console.log("width", fovWidth);
		console.log("height", fovHeight);

		// addNewPlayerToken(0);
	]]>
	</script>

	<script type = "application/ecmascript">
	<![CDATA[
		function addNewPT (newPT, nptNumber, ptSize, ptDictionaryJSON)
		{
			// Import new player token into the current DOM
			var pt = document.importNode(newPT.documentElement.getElementById("playerToken00"), true);
			var ptDataDict = eval(ptDictionaryJSON);

			// Set x and y default coordinates.
			var nptx = 9 + 35 + ((Number(nptNumber) - 1) * (ptSize + 2));
			var npty = 9 + 45;
			if (nptNumber == 0) { nptx = 0; npty = 0; }

			// Reset x and y coordinates.
			var playerTokenElements = 0;
			var carriageReturnNumber = 16;
			var resetTokenJustification = 0;
			var justificationResetCounter = 0;
			var xJustificationFactor = resetTokenJustification * carriageReturnNumber * justificationResetCounter;
			var yJustificationFactor = ptSize * justificationResetCounter;

			if (nptNumber != 0)
			{
				playerTokenElements = document.getElementsByClassName("playerToken");
				if (nptNumber < 0) { nptNumber = playerTokenElements.length + 1; }
				// alert("nptNumber: " + nptNumber);

				// https://stackoverflow.com/questions/4228356/how-to-perform-integer-division-and-get-the-remainder-in-javascript
				if (nptNumber > carriageReturnNumber) { resetTokenJustification = 1; }
				justificationResetCounter = ~~((Number(nptNumber) - 1) / carriageReturnNumber);
				xJustificationFactor = resetTokenJustification * carriageReturnNumber * justificationResetCounter;
				yJustificationFactor = ptSize * justificationResetCounter;
				
				nptx = 9 + 35 + ((Number(nptNumber) - xJustificationFactor - 1) * (ptSize + 2));
				npty = 9 + 45 + yJustificationFactor;
			}

			console.log("nptNumber", nptNumber)
			var ptDataDictSize = ptDataDict.length;
			console.log("ptDataDictSize", ptDataDictSize);

			if (nptNumber > ptDataDictSize)
			{
				alert("There are no more playerTokens (PTs) to add to the field, all " + ptDataDictSize + " PTs in the ptDataDict are already on the field.  To focus a player click on the token, which should enlarge it it and bring it to the center of the field.  Also you can use the previous/next left/right scroll button arrows to cycle the playerToken focus."); 
			}
			else
			{
				var nptId = "newPlayerToken" + nptNumber;
				var ptDictArrayIndex = Number(nptNumber) - 1;
				var ptDictEntry = ptDataDict[ptDictArrayIndex];
				console.log("ptDictEntry", ptDictEntry);

				var ptPlayerName = ptDictEntry.ptPlayerNickName;
				var ptJerseyNumber = ptDictEntry.ptJerseyNumber;
				var nextPT = Number(nptNumber) + 1;

				pt.setAttribute("id", nptId); // Set pt (player-token) id attr. 
				pt.getElementsByClassName("tokenNumber").item(0).textContent = nptNumber;
				pt.getElementsByClassName("ptJerseyNumber").item(0).textContent = ptJerseyNumber;
				pt.getElementsByClassName("ptPlayerName").item(0).textContent = ptPlayerName;

				pt.setAttribute("transform", "translate(" + nptx + "," + npty + ")"); // Set player-token x,y coordinate.
				// pt.setAttribute("onclick", "popPT(" + nextPT + "," + ptSize + "); return false;");
				pt.setAttribute("onclick", "focusPlayerToken(evt, this.id); return false;");

				// var ptImage = pt.getElementById("ptImage");
				var ptImage = pt.getElementsByClassName("ptImage").item(0);
				if (ptImage !== undefined)
				{
					if (ptDictEntry.ptImage !== undefined)
					{
						ptImage.setAttribute("xlink:href", ptDictEntry.ptImage);
						console.log("ptImage", ptImage);
					}

					var ptImageCircle = pt.getElementsByClassName("ptImageCircle").item(0);
					if (ptImageCircle !== undefined)
					{
						// ptImageCircle.setAttribute("display", "none");
						console.log("ptImageCircle", ptImageCircle);
					}
				}
				console.log("pt", pt)
				document.querySelector('svg').appendChild(pt);
			}
		};

		function fetchXML (url, callback, number, size, dictJSON)
		{
			var xhr = new XMLHttpRequest();
			xhr.open('GET', url, true);
			xhr.onreadystatechange =
				function (evt)
				{
					// Do not explicitly handle errors, those should be
					// visible via console output in the browser.
					if (xhr.readyState === 4)
					{
						callback(xhr.responseXML, number, size, dictJSON);
					}
				};

			xhr.send(null);
		};

		function pushPT (nptNumber)
		{
			/*
				: Varsity = 19 players :

				 1. Ross Brungardt GK 11 00

				 +  6 defenders
				 2. Jaâ€™Melle Dye D 12 2
				 3. Robbie Kleibohmer D 12 9
				 4. Jack Anderson D 11 5
				 5. Garrett Hart D 11 15
				 6. Trey Hulse D 11 3
				 7. Gary Schmidt D 11 4

				 +  9 midfielders
				 8. Ben Matthews M 12 19
				 9. Joseph Minder M 12 17
				10. Dario Ramirez M 12 14
				11. Cole Shupert M 11 10
				12. Matteo Kalusha-Aguirre M 10 12
				13. Kanak Masten M 10 18
				14. Mason Anderson M 9 13
				15. Tanner Glanton M 9 16
				16. Alec Murphy M 9 11

				 +  3 forwards
				17. Quentin Harrington F 12 6
				18. Anton Martinez de Velasco F 12 7
				19. Will Yanek F 11 8
			*/

			var ptDictionaryJSON_V = '' + // '{[{ptPlayerName: "JaMelle"}]}'
					'{' + 
						'[' +
							'{' +
								'tokenNumber: 1,' +
								'ptJerseyNumber: "00",' +
								'ptPlayerNickName: "Ross",' +
								'ptPlayerFirstName: "Ross",' +
								'ptPlayerLastName: "Brungardt",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Goal Keeper",' +
								'ptPositionAbbreviation: "GK",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 2,' +
								'ptJerseyNumber: 2,' +
								'ptPlayerNickName: "JaMelle",' +
								'ptPlayerFirstName: "JaMelle",' +
								'ptPlayerLastName: "Dye",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Defender",' +
								'ptPositionAbbreviation: "D",' +
								'ptStudentGradeLevel: 12' +
							'},' +
							'{' +
								'tokenNumber: 3,' +
								'ptJerseyNumber: 12,' +
								'ptPlayerNickName: "Robbie",' +
								'ptPlayerFirstName: "Robbie",' +
								'ptPlayerLastName: "Kleibohmer",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Defender",' +
								'ptPositionAbbreviation: "D",' +
								'ptStudentGradeLevel: 12' +
							'},' +
							'{' +
								'tokenNumber: 4,' +
								'ptJerseyNumber: 5,' +
								'ptPlayerNickName: "Jack",' +
								'ptPlayerFirstName: "Jack",' +
								'ptPlayerLastName: "Anderson",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Defender",' +
								'ptPositionAbbreviation: "D",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 5,' +
								'ptJerseyNumber: 15,' +
								'ptPlayerNickName: "Garrett",' +
								'ptPlayerFirstName: "Garrett",' +
								'ptPlayerLastName: "Hart",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Defender",' +
								'ptPositionAbbreviation: "D",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 6,' +
								'ptJerseyNumber: 3,' +
								'ptPlayerNickName: "Trey",' +
								'ptPlayerFirstName: "Hulse",' +
								'ptPlayerLastName: "Hart",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Defender",' +
								'ptPositionAbbreviation: "D",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 7,' +
								'ptJerseyNumber: 4,' +
								'ptPlayerNickName: "Gary",' +
								'ptPlayerFirstName: "Schmidt",' +
								'ptPlayerLastName: "Hart",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Defender",' +
								'ptPositionAbbreviation: "D",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 8,' +
								'ptJerseyNumber: 19,' +
								'ptPlayerNickName: "Ben",' +
								'ptPlayerFirstName: "Ben",' +
								'ptPlayerLastName: "Matthews",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 12' +
							'},' +
							'{' +
								'tokenNumber: 9,' +
								'ptJerseyNumber: 17,' +
								'ptPlayerNickName: "Joey",' +
								'ptPlayerFirstName: "Joseph",' +
								'ptPlayerLastName: "Minder",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 12' +
							'},' +
							'{' +
								'tokenNumber: 10,' +
								'ptJerseyNumber: 14,' +
								'ptPlayerNickName: "Dario",' +
								'ptPlayerFirstName: "Dario",' +
								'ptPlayerLastName: "Ramirez",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 12' +
							'},' +
							'{' +
								'tokenNumber: 11,' +
								'ptJerseyNumber: 10,' +
								'ptPlayerNickName: "Cole",' +
								'ptPlayerFirstName: "Cole",' +
								'ptPlayerLastName: "Shupert",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 12,' +
								'ptJerseyNumber: 12,' +
								'ptPlayerNickName: "Matteo",' +
								'ptPlayerFirstName: "Matteo",' +
								'ptPlayerLastName: "Kalusha-Aguirre",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 10,' +
								'ptImage: "ptImages/matteo.png"' +
							'},' +
							'{' +
								'tokenNumber: 13,' +
								'ptJerseyNumber: 18,' +
								'ptPlayerNickName: "Kanak",' +
								'ptPlayerFirstName: "Kanak",' +
								'ptPlayerLastName: "Masten",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 14,' +
								'ptJerseyNumber: 13,' +
								'ptPlayerNickName: "Mason",' +
								'ptPlayerFirstName: "Mason",' +
								'ptPlayerLastName: "Anderson",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 15,' +
								'ptJerseyNumber: 16,' +
								'ptPlayerNickName: "Tanner",' +
								'ptPlayerFirstName: "Tanner",' +
								'ptPlayerLastName: "Glanton",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 16,' +
								'ptJerseyNumber: 11,' +
								'ptPlayerNickName: "Alec",' +
								'ptPlayerFirstName: "Alec",' +
								'ptPlayerLastName: "Murphy",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Midfielder",' +
								'ptPositionAbbreviation: "M",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 17,' +
								'ptJerseyNumber: 6,' +
								'ptPlayerNickName: "Quentin",' +
								'ptPlayerFirstName: "Quentin",' +
								'ptPlayerLastName: "Harrington",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Forward",' +
								'ptPositionAbbreviation: "F",' +
								'ptStudentGradeLevel: 12' +
							'},' +
							'{' +
								'tokenNumber: 18,' +
								'ptJerseyNumber: 7,' +
								'ptPlayerNickName: "Anton",' +
								'ptPlayerFirstName: "Anton",' +
								'ptPlayerLastName: "Martinez de Velasco",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Forward",' +
								'ptPositionAbbreviation: "F",' +
								'ptStudentGradeLevel: 12' +
							'},' +
							'{' +
								'tokenNumber: 19,' +
								'ptJerseyNumber: 8,' +
								'ptPlayerNickName: "Will",' +
								'ptPlayerFirstName: "William",' +
								'ptPlayerLastName: "Yanek",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "Forward",' +
								'ptPositionAbbreviation: "F",' +
								'ptStudentGradeLevel: 11' +
							'}' +
						']' +
					'}';

			/*
				: Junior Varsity = 19 players :

				 1. Luke Dunlap 11 11
				 2. Hunter Jones 11 5
				 3. Spencer King 11 12
				 4. Paul Lyan 11 18
				 5. Nathan Stoddard 11 13
				 6. Brandon Thimmesch 11 7
				 7. Andrew Williams 11 22
				 8. Cooper Wright 11 10
				 9. Joseph Hawker 10 19
				10. Ben Hoopes 10 00
				11. Nicholai Jost-Epp 10 15
				12. Jordan Lavin 10 6
				13. Peyton Mallory 10 14
				14. Max Northrop 10 8
				15. Alex Stark 10 17
				16. Jackson Theilen 10 00
				17. Aidan Truong 10 3
				18. Nicholas Davies 9 2
				19. Abdalla Eltom 9 9
			*/

			var ptDictionaryJSON_JV = '' +
					'{' + 
						'[' +
							'{' +
								'tokenNumber: 1,' +
								'ptJerseyNumber: 11,' +
								'ptPlayerNickName: "Luke",' +
								'ptPlayerFirstName: "Luke",' +
								'ptPlayerLastName: "Dunlap",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 2,' +
								'ptJerseyNumber: 5,' +
								'ptPlayerNickName: "Hunter",' +
								'ptPlayerFirstName: "Hunter",' +
								'ptPlayerLastName: "Jones",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 3,' +
								'ptJerseyNumber: 12,' +
								'ptPlayerNickName: "Spencer",' +
								'ptPlayerFirstName: "Spencer",' +
								'ptPlayerLastName: "King",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 4,' +
								'ptJerseyNumber: 18,' +
								'ptPlayerNickName: "Paul",' +
								'ptPlayerFirstName: "Paul",' +
								'ptPlayerLastName: "Lyan",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 5,' +
								'ptJerseyNumber: 13,' +
								'ptPlayerNickName: "Nathan",' +
								'ptPlayerFirstName: "Nathan",' +
								'ptPlayerLastName: "Stoddard",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 6,' +
								'ptJerseyNumber: 7,' +
								'ptPlayerNickName: "Brandon",' +
								'ptPlayerFirstName: "Brandon",' +
								'ptPlayerLastName: "Thimmesch",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 7,' +
								'ptJerseyNumber: 22,' +
								'ptPlayerNickName: "Drew",' +
								'ptPlayerFirstName: "Andrew",' +
								'ptPlayerLastName: "Williams",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 8,' +
								'ptJerseyNumber: 10,' +
								'ptPlayerNickName: "Cooper",' +
								'ptPlayerFirstName: "Cooper",' +
								'ptPlayerLastName: "Wright",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 11' +
							'},' +
							'{' +
								'tokenNumber: 9,' +
								'ptJerseyNumber: 19,' +
								'ptPlayerNickName: "Joe",' +
								'ptPlayerFirstName: "Joseph",' +
								'ptPlayerLastName: "Hawker",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 10,' +
								'ptJerseyNumber: "00",' +
								'ptPlayerNickName: "Ben",' +
								'ptPlayerFirstName: "Benjiman",' +
								'ptPlayerLastName: "Hoopes",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 11,' +
								'ptJerseyNumber: 15,' +
								'ptPlayerNickName: "Nicholai",' +
								'ptPlayerFirstName: "Nicholai",' +
								'ptPlayerLastName: "Jost-Epp",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 12,' +
								'ptJerseyNumber: 6,' +
								'ptPlayerNickName: "Jordan",' +
								'ptPlayerFirstName: "Jordan",' +
								'ptPlayerLastName: "Lavin",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 13,' +
								'ptJerseyNumber: 14,' +
								'ptPlayerNickName: "Peyton",' +
								'ptPlayerFirstName: "Peyton",' +
								'ptPlayerLastName: "Mallory",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 14,' +
								'ptJerseyNumber: 8,' +
								'ptPlayerNickName: "Max",' +
								'ptPlayerFirstName: "Max",' +
								'ptPlayerLastName: "Northrop",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 15,' +
								'ptJerseyNumber: 17,' +
								'ptPlayerNickName: "Alex",' +
								'ptPlayerFirstName: "Alex",' +
								'ptPlayerLastName: "Stark",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 16,' +
								'ptJerseyNumber: "00",' +
								'ptPlayerNickName: "Jackson",' +
								'ptPlayerFirstName: "Jackson",' +
								'ptPlayerLastName: "Theilen",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 17,' +
								'ptJerseyNumber: 3,' +
								'ptPlayerNickName: "Aidan",' +
								'ptPlayerFirstName: "Aidan",' +
								'ptPlayerLastName: "Truong",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 18,' +
								'ptJerseyNumber: 2,' +
								'ptPlayerNickName: "Nick",' +
								'ptPlayerFirstName: "Nicholas",' +
								'ptPlayerLastName: "Davies",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 19,' +
								'ptJerseyNumber: 9,' +
								'ptPlayerNickName: "Abdalla",' +
								'ptPlayerFirstName: "Abdalla",' +
								'ptPlayerLastName: "Eltom",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'}' +
						']' +
					'}';

			/*
				: C-Team = 20 players :

				 1. Trey Kelly 10 21
				 2. Guillermo Rodriguez 10 10
				 3. Wheeler Battaglia-Davis 9 11
				 4. Ben Cohen 9 5
				 5. Alex Culbertson 9 3
				 6. Evan Day 9 16
				 7. Brevin Flory 9 8
				 8. Ethan Gaddie 9 12
				 9. Omar Gonzalez 9 7
				10. Salvador Good 9 2
				11. Sam Gordon-Ross 9 18
				12. Carter Knox 9 4
				13. Sam Mandigo 9 14
				14. Ike Phillips 9 17
				15. Chase Reed 9 15
				16. Isaac Seybold 9 9
				17. Daniel Sikes 9 6
				18. Trenton Snyder 9 19 / 0
				19. Giovanni Ventello 9 13
				20. Adam Walther 9 20 / 00
			*/

			var ptDictionaryJSON_CT = '' +
					'{' + 
						'[' +
							'{' +
								'tokenNumber: 1,' +
								'ptJerseyNumber: 21,' +
								'ptPlayerNickName: "Trey",' +
								'ptPlayerFirstName: "Trey",' +
								'ptPlayerLastName: "Kelly",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 2,' +
								'ptJerseyNumber: 10,' +
								'ptPlayerNickName: "Guillermo",' +
								'ptPlayerFirstName: "Guillermo",' +
								'ptPlayerLastName: "Rodriguez",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 10' +
							'},' +
							'{' +
								'tokenNumber: 3,' +
								'ptJerseyNumber: 11,' +
								'ptPlayerNickName: "Wheeler",' +
								'ptPlayerFirstName: "Wheeler",' +
								'ptPlayerLastName: "Battaglia-Davis",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 4,' +
								'ptJerseyNumber: 5,' +
								'ptPlayerNickName: "Ben",' +
								'ptPlayerFirstName: "Ben",' +
								'ptPlayerLastName: "Cohen",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 5,' +
								'ptJerseyNumber: 3,' +
								'ptPlayerNickName: "Alex",' +
								'ptPlayerFirstName: "Alex",' +
								'ptPlayerLastName: "Culbertson",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 6,' +
								'ptJerseyNumber: 16,' +
								'ptPlayerNickName: "Evan",' +
								'ptPlayerFirstName: "Evan",' +
								'ptPlayerLastName: "Day",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 7,' +
								'ptJerseyNumber: 8,' +
								'ptPlayerNickName: "Brevin",' +
								'ptPlayerFirstName: "Brevin",' +
								'ptPlayerLastName: "Flory",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 8,' +
								'ptJerseyNumber: 12,' +
								'ptPlayerNickName: "Ethan",' +
								'ptPlayerFirstName: "Ethan",' +
								'ptPlayerLastName: "Gaddie",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 9,' +
								'ptJerseyNumber: 7,' +
								'ptPlayerNickName: "Omar",' +
								'ptPlayerFirstName: "Omar",' +
								'ptPlayerLastName: "Gonzalez",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 10,' +
								'ptJerseyNumber: 2,' +
								'ptPlayerNickName: "Salvador",' +
								'ptPlayerFirstName: "Salvador",' +
								'ptPlayerLastName: "Good",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 11,' +
								'ptJerseyNumber: 18,' +
								'ptPlayerNickName: "Sam",' +
								'ptPlayerFirstName: "Sam G-R",' +
								'ptPlayerLastName: "Gordon-Ross ",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 12,' +
								'ptJerseyNumber: 4,' +
								'ptPlayerNickName: "Carter",' +
								'ptPlayerFirstName: "Carter",' +
								'ptPlayerLastName: "Knox",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 13,' +
								'ptJerseyNumber: 14,' +
								'ptPlayerNickName: "Sam M",' +
								'ptPlayerFirstName: "Sam",' +
								'ptPlayerLastName: "",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 14,' +
								'ptJerseyNumber: 17,' +
								'ptPlayerNickName: "Ike",' +
								'ptPlayerFirstName: "Ike",' +
								'ptPlayerLastName: "Phillips",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 15,' +
								'ptJerseyNumber: 15,' +
								'ptPlayerNickName: "Chase",' +
								'ptPlayerFirstName: "Chase",' +
								'ptPlayerLastName: "Reed",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 16,' +
								'ptJerseyNumber: 9,' +
								'ptPlayerNickName: "Isaac",' +
								'ptPlayerFirstName: "Isaac",' +
								'ptPlayerLastName: "Seybold",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 17,' +
								'ptJerseyNumber: 6,' +
								'ptPlayerNickName: "Daniel",' +
								'ptPlayerFirstName: "Daniel",' +
								'ptPlayerLastName: "Sikes",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 18,' +
								'ptJerseyNumber: 19,' + // 0
								'ptPlayerNickName: "Trenton",' +
								'ptPlayerFirstName: "Trenton",' +
								'ptPlayerLastName: "Snyder",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 19,' +
								'ptJerseyNumber: 13,' +
								'ptPlayerNickName: "Giovanni",' +
								'ptPlayerFirstName: "Giovanni",' +
								'ptPlayerLastName: "Ventello",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'},' +
							'{' +
								'tokenNumber: 20,' +
								'ptJerseyNumber: 20,' + // "00"
								'ptPlayerNickName: "Adam",' +
								'ptPlayerFirstName: "Adam",' +
								'ptPlayerLastName: "Walther",' +
								'ptPositionNumber: "null",' +
								'ptPositionName: "null",' +
								'ptPositionAbbreviation: "A",' +
								'ptStudentGradeLevel: 9' +
							'}' +
						']' +
					'}';

			var ptDictionaryJSON = ptDictionaryJSON_V;
			ptDictionaryJSON = ptDictionaryJSON_JV;
			// ptDictionaryJSON = ptDictionaryJSON_CT;

			fetchXML
			(
				"http://localhost:8000/chestyLions/soccer/varsity/playerToken.svg",
				// "http://localhost:8000/2017/LHS/chestyLions/soccer/varsity/playerToken.svg",
				// "http://localhost:8000/playerToken.svg",
				// http://team-futbol-ks.org/playerToken.svg",
				addNewPT,
				nptNumber,
				72,
				ptDictionaryJSON
			);
		};

		function popPT (nptNumber)
		{
		}

		function addPlayerTokens(numPlayers)
		{
			var next;
			for (next = 1; next <= numPlayers; next++)
			{
				pushPT(next);
			}
		}
	]]>
	</script>

	<script type = "application/ecmascript">
	<![CDATA[
		window.onload = function ()
		{
			addPlayerTokens(19);
		}

		/*
		https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload

		function load ()
		{
			console.log("load event detected!");
		}
		window.onload = load;

		const load = () =>
		{
			console.log("load event detected!");
		} 
		window.onload = load;
		*/
	]]>
	</script>


	<script type = "application/ecmascript">
	<![CDATA[
		function unFocusPlayerToken (id)
		{
			var pt = document.getElementById(id);
			var ptSize = 72;

			// newPlayerToken
			// 01234567890123
			// The nptNumber is the last part of the id, the part after 'newPlayerToken'.
			var nptNumber = pt.id.substring(14);

			// Set x and y default coordinates.
			var nptx = 9 + 35 + ((Number(nptNumber) - 1) * (ptSize + 2));
			var npty = 9 + 45;
			if (nptNumber == 0) { nptx = 0; npty = 0; }

			// Reset x and y coordinates.
			var playerTokenElements = 0;
			var carriageReturnNumber = 16;
			var resetTokenJustification = 0;
			var justificationResetCounter = 0;
			var xJustificationFactor = resetTokenJustification * carriageReturnNumber * justificationResetCounter;
			var yJustificationFactor = ptSize * justificationResetCounter;

			if (nptNumber > carriageReturnNumber) { resetTokenJustification = 1; }
			justificationResetCounter = ~~((Number(nptNumber) - 1) / carriageReturnNumber);
			xJustificationFactor = resetTokenJustification * carriageReturnNumber * justificationResetCounter;
			yJustificationFactor = ptSize * justificationResetCounter;

			nptx = 9 + 35 + ((Number(nptNumber) - xJustificationFactor - 1) * (ptSize + 2));
			npty = 9 + 45 + yJustificationFactor;

			pt.setAttribute("transform", "scale(1), translate(" + nptx + ", " + npty + ")");
			// Note that the x and y below do get set on the element,
			// but the screen placement remains as if '0,0', so added the translate in the trasnform above. 
			pt.setAttribute("x", nptx);
			pt.setAttribute("y", npty);
			pt.setAttribute("class", "playerToken focusFalse");
			pt.setAttribute("class", "playerToken focusFalse");
			// pt.setAttribute("style", "background: url(none.png);");

			var ptImageCircle = pt.getElementsByClassName("ptImageCircle").item(0);
			if (ptImageCircle !== undefined)
			{
				// ptImageCircle.setAttribute("display", "none");
				console.log("ptImageCircle", ptImageCircle);
			}
		}

		function focusPlayerToken (evt, id)
		{
		// function focusSVGDoc (evt, nptNumber)
		// {
			console.log("id", id);
			var playerToken = document.getElementById(id); // playerTokenId);
			console.log("playerToken", playerToken);
			/*
			// var playerTokenById = document.getElementById("newPlayerToken" + Number(nptNumber));
			var playerTokenId = id;
			var playerTokenEID = playerToken.id;
			var target = evt.target;
			var ptNumber = target.id;

			var epx = "unknown";
			var epy = "unknown";
			if (evt.pageX !== undefined) epx = evt.pageX;
			if (evt.pageY !== undefined) epy = evt.pageY;
			alert("id/playerTokenId: " + id + ", ptNumber: " + ptNumber + ", epx: " + epx + ", epy: " + epy + ", playerTokenEID: " + playerTokenEID);
			*/

			/*
			playerToken.setAttribute("x", 800);
			playerToken.setAttribute("y", 450);
			*/

			// playerToken.setAttribute("transform", "scale(3), translate(" + "0" + "," + "0" + "), translate(" + "800" + "," + "450" + ")");
			// playerToken.setAttribute("transform", "scale(.5), translate(43.12, 25.9)");
			// playerToken.setAttribute("transform", "scale(1), translate(599, 459)");
			// playerToken.setAttribute("transform", "scale(2), translate(281.5, 211.6)");
			// (72 + 1200) / (2 * 3) = 1272 / 6 = 212
			// 212 - 72/2 = 212 - 36 = 176 
			// (72 + 900) / (2 * 3) = 972 / 6 = 162
			// 162 - 72/2 = 162 - 36 = 126
			// playerToken.setAttribute("transform", "scale(3), translate(175.6, 129)");
			// playerToken.setAttribute("transform", "scale(4), translate(122.55, 87.75)");
			// playerToken.setAttribute("transform", "scale(5), translate(90.7, 63)");
			// playerToken.setAttribute("transform", "scale(6), translate(69.6, 46.52)");
			playerToken.setAttribute("transform", "scale(7), translate(54.5, 34.8)");
			// playerToken.setAttribute("transform", "scale(8), translate(43.12, 25.9)");
			// playerToken.setAttribute("transform", "scale(9), translate(34.34, 19)");
			// playerToken.setAttribute("transform", "scale(10), translate(27.3, 13.5)");
			playerToken.setAttribute("fill-opacity", "1");
			playerToken.setAttribute("stroke-opacity", "1");
		// }

			// Fetch the document using XHR, Ajax style?
			/*
			fetchXML
			(
				evt, // "http://localhost:8000/2017/LHS/chestyLions/soccer/varsity/playerToken.svg", // #playerToken00",
				// evt, // "http://localhost:8000/playerToken.svg", // #playerToken00",
				// evt, // http://team-futbol-ks.org/playerToken.svg", //fieldMAX.svg
				focusSVGDoc,
				nptNumber
			);
			*/
			/*
			pt.setAttribute("transform", "translate(" + fieldCenterX + "," + fieldCenterY + ")"); // Set player-token x,y coordinate.
			pt.setAttribute("onclick", "focusNewPlayerToken(" + nptNumber + ")"); return false;");
			pt.setAttribute("onclick", "unFocusNewPlayerToken(" + nptNumber + ")"); return false;");
			*/

			// Get the token that is currently in focus and unFocus it.
			var playerTokenElementsWithFocus = document.getElementsByClassName("focusTrue");
			var numPlayerTokenWithFocus = playerTokenElementsWithFocus.length;

			if (numPlayerTokenWithFocus == 1)
			{
				var ptID = playerTokenElementsWithFocus.item(0).id;
				unFocusPlayerToken(ptID);
			}

			playerToken.setAttribute("class", "playerToken focusTrue");
			// playerToken.setAttribute("style", "background: url(cc-GPL-a.png);");

			var ptImageCircle = playerToken.getElementsByClassName("ptImageCircle").item(0);
			if (ptImageCircle !== undefined)
			{
				// ptImageCircle.setAttribute("display", "inline"); // inherit
				console.log("ptImageCircle", ptImageCircle);
			}
		};

		// focusNewPlayerToken(0);
	]]>
	</script>

	<script type = "application/ecmascript">
	<![CDATA[
		function focusPrevToken (evt) // scrollTokenBackward
		{
			var playerTokenElements = document.getElementsByClassName("playerToken");
			var numPlayerTokens = -1;
			if (playerTokenElements !== undefined && numPlayerTokens !== undefined)
			{
				console.log("playerTokenElements", playerTokenElements);
				numPlayerTokens = playerTokenElements.length;
	 			if (numPlayerTokensWithFocus !== undefined)
				{
					console.log("numPlayerTokens", numPlayerTokens);
				}
			}

			var playerTokenElementsWithFocus = document.getElementsByClassName("focusTrue");
			var numPlayerTokensWithFocus = -1;
			if (playerTokenElementsWithFocus !== undefined)
			{
				console.log("playerTokenElementsWithFocus", playerTokenElementsWithFocus);
				numPlayerTokensWithFocus = playerTokenElementsWithFocus.length;
	 			if (numPlayerTokensWithFocus !== undefined)
				{
					console.log("numPlayerTokensWithFocus", numPlayerTokensWithFocus);
				}
			}

			var playerTokenElementsWithoutFocus = document.getElementsByClassName("focusFalse");
			var numPlayerTokensWithoutFocus = -1;
			if (playerTokenElementsWithoutFocus !== undefined)
			{
				console.log("playerTokenElementsWithoutFocus", playerTokenElementsWithoutFocus);
				numPlayerTokensWithoutFocus = playerTokenElementsWithoutFocus.length;
				if(numPlayerTokensWithoutFocus !== undefined)
				{
					console.log("numPlayerTokensWithoutFocus", numPlayerTokensWithoutFocus);
				}
			}

			if (numPlayerTokens > 0)
			{
				var pt;
				var ptID;

				if (numPlayerTokensWithFocus == 0)
				{
					pt = playerTokenElements.item(0);
					ptID = pt.getAttribute("id");
					console.log("ptID", ptID);

					// If no tokens are in focus then focus on the first.
					ptID = 'newPlayerToken1';
					focusPlayerToken(evt, ptID);
				}
				else
				{
					var ptWithFocus;
					var ptWithFocusID
					if (numPlayerTokensWithFocus == 1)
					{
						ptWithFocus = playerTokenElementsWithFocus.item(0);
						ptWithFocusID = ptWithFocus.getAttribute("id");
						console.log("ptWithFocusID", ptWithFocusID);

						// newPlayerToken
						// 01234567890123
						// The nptNumber is the last part of the id, the part after 'newPlayerToken'.
						var nptNumber = ptWithFocusID.substring(14);
						ptID = 'newPlayerToken' + (Number(nptNumber) - 1);

						// If the first token is currently the one in focus
						// then circle back and give focus to the last token.
						if (nptNumber == 1) { ptID = 'newPlayerToken' + numPlayerTokens; }
						console.log("ptID", ptID);

						focusPlayerToken(evt, ptID);
					}
					else
					{
						if (numPlayerTokensWithFocus > 1)
						{
						}
					}
				}
			}
		}

		function focusNextToken (evt) // scrollTokenForward
		{
			var playerTokenElements = document.getElementsByClassName("playerToken");
			var numPlayerTokens = -1;
			if (playerTokenElements !== undefined && numPlayerTokens !== undefined)
			{
				console.log("playerTokenElements", playerTokenElements);
				numPlayerTokens = playerTokenElements.length;
	 			if (numPlayerTokensWithFocus !== undefined)
				{
					console.log("numPlayerTokens", numPlayerTokens);
				}
			}

			var playerTokenElementsWithFocus = document.getElementsByClassName("focusTrue");
			var numPlayerTokensWithFocus = -1;
			if (playerTokenElementsWithFocus !== undefined)
			{
				console.log("playerTokenElementsWithFocus", playerTokenElementsWithFocus);
				numPlayerTokensWithFocus = playerTokenElementsWithFocus.length;
	 			if (numPlayerTokensWithFocus !== undefined)
				{
					console.log("numPlayerTokensWithFocus", numPlayerTokensWithFocus);
				}
			}

			var playerTokenElementsWithoutFocus = document.getElementsByClassName("focusFalse");
			var numPlayerTokensWithoutFocus = -1;
			if (playerTokenElementsWithoutFocus !== undefined)
			{
				console.log("playerTokenElementsWithoutFocus", playerTokenElementsWithoutFocus);
				numPlayerTokensWithoutFocus = playerTokenElementsWithoutFocus.length;
				if(numPlayerTokensWithoutFocus !== undefined)
				{
					console.log("numPlayerTokensWithoutFocus", numPlayerTokensWithoutFocus);
				}
			}

			if (numPlayerTokens > 0)
			{
				var pt;
				var ptID;

				if (numPlayerTokensWithFocus == 0)
				{
					pt = playerTokenElements.item(0);
					ptID = pt.getAttribute("id");
					console.log("ptID", ptID);

					// If no tokens are in focus then focus on the last.
					ptID = 'newPlayerToken' + numPlayerTokens;
					focusPlayerToken(evt, ptID);
				}
				else
				{
					var ptWithFocus;
					var ptWithFocusID
					if (numPlayerTokensWithFocus == 1)
					{
						ptWithFocus = playerTokenElementsWithFocus.item(0);
						ptWithFocusID = ptWithFocus.getAttribute("id");
						console.log("ptWithFocusID", ptWithFocusID);

						// newPlayerToken
						// 01234567890123
						// The nptNumber is the last part of the id, the part after 'newPlayerToken'.
						var nptNumber = ptWithFocusID.substring(14);
						ptID = 'newPlayerToken' + (Number(nptNumber) + 1);

						// If the last token is currently the one in focus
						// then circle back and give focus to the first token.
						if (nptNumber == numPlayerTokens) { ptID = 'newPlayerToken1'; }
						console.log("ptID", ptID);

						focusPlayerToken(evt, ptID);
					}
					else
					{
						if (numPlayerTokensWithFocus > 1)
						{
						}
					}
				}
			}
		}
	]]>
	</script>

	<script type = "application/ecmascript">
	<![CDATA[
		function insertPlayerTokenAsUseElement (nptNumber) // (evt, nptNumber) // nptx, npty)
		{
			var nextPT = Number(nptNumber) + 1;
			var ptSize = 72;
			var epx = "unknown";
			var epy = "unknown";

			// if (evt.pageX !== undefined) epx = evt.pageX;
			// if (evt.pageY !== undefined) epy = evt.pageY;

			// alert("epx: " + epx + ", epy: " + epy);

			var svg = document.getElementsByTagName('svg')[0]; // Get svg element
			var docWidth = svg.getAttribute("width");
			var docHeight = svg.getAttribute("height");
			// alert("docWidth: " + docWidth + ", docHeight: " + docHeight);

			/*
			nptx = (35 - (ptSize / 2)) + ((Number(nptNumber) - 1) * ptSize);
			npty = (45 - (ptSize / 2));
			*/
			var nptx = 9 + 35 + ((Number(nptNumber) - 1) * (ptSize + 2));
			var npty = 9 + 45;

			// https://stackoverflow.com/questions/16488884/add-svg-element-to-existing-svg-using-dom
			// Create a use element in SVG's namespace.
			var pt = document.createElementNS("http://www.w3.org/2000/svg", "use");
			pt.setAttribute("id", "newPlayerToken" + nptNumber); // Set pt (player-token) id attr. 
			pt.setAttribute("x", nptx); // Set player-token x-coordinate.
			pt.setAttribute("y", npty); // Set player-token y-coordinate.

			// Set player-token onclick event listener.
			pt.setAttribute("onlick", "insertPlayerToken(evt," + nextPT + "); return false;");

			// http://taye.me/blog/svg/a-guide-to-svg-use-elements/
			// Set pt (player-token) xlink:href attr. 
			pt.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "playerToken.svg#playerToken00");
			// pt.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "2017/LHS/chestyLions/soccer/varsity/playerToken.svg#playerToken00");

			// Get number from playerToken by class tokenNumber.
			// It is a text element inside an oval/ellipse graphic, g -> (path + text).
			// var playerTokenLabel = pt.getElementsByClassName("tokenNumber"); // [0]; // .item(0);
			// alert(playerTokenLabel.length);
			// var playerTokenLabelTextUnmodified = pt.getElementsByClassName("tokenNumber").item(0).nodeValue;
			// .innerHTML => Uncaught TypeError: Cannot read property 'innerHTML' of null;
			// var ptText= playerTokenLabel.textContent;
			// alert("nptNumber: " + nptNumber + ", playerTokenLabelTextUnmodified: " + playerTokenLabelTextUnmodified + ", ptText: " + ptText);
			// pt.getElementsByClassName("tokenNumber").item(0).nodeValue = nptNumber;

			document.querySelector('svg').appendChild(pt);
			// var svg = document.getElementsByTagName('svg')[0]; // Get svg element
			// svg.appendChild(pt);

			var newPlayerToken = document.getElementById("newPlayerToken" + nptNumber);
		}

		function insertSetOfPlayerTokensAsUseElements (setSize, callback)
		{
			var ptCount = 0
			while (ptCount <= setSize)
			{
				ptCount++;
				insertPlayerTokenAsUseElement(ptCount);
			}
		}
	]]>
	</script>

</svg>

